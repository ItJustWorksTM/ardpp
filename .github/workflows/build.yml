name: Build
on: [push, pull_request]
jobs:
  build-linux:
    name: arduino-prelude - Linux
    runs-on: ubuntu-latest
    container: ubuntu:bionic
    env:
      DEBIAN_FRONTEND: "noninteractive"
      CMAKE_VERSION: 3.21.0
      CC: gcc-11
      CXX: g++-11
    steps:
      - name: Get toolchain
        run: |
          apt-get update
          apt-get install -y software-properties-common wget ninja-build zlib1g-dev
          add-apt-repository -y ppa:ubuntu-toolchain-r/test
          apt-get install -y g++-11
      - name: Get CMake
        run: |
          wget -q https://github.com/Kitware/CMake/releases/download/v$CMAKE_VERSION/cmake-$CMAKE_VERSION-linux-x86_64.sh
          chmod +x cmake-$CMAKE_VERSION-linux-x86_64.sh
          ./cmake-$CMAKE_VERSION-linux-x86_64.sh --skip-license --prefix=/usr/local
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: /opt/llvm_static
          key: ubuntu_bionic-llvm12.0
      - name: Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          apt-get install -y git make libtool-bin
          git clone --depth 1 https://github.com/deech/libclang-static-build
          cd libclang-static-build
          cmake -DCMAKE_INSTALL_PREFIX=/opt/llvm_static -S . -B build
          cmake --build ./build --target install
          cd ..
      - uses: actions/checkout@v2
      - name: Configure
        run: cmake -G Ninja -DARDPRE_CXXRT_LINKING=STATIC -DSLIBCLANG_DIR=/opt/llvm_static -S . -B dist
      - name: Build
        run: cmake --build ./dist
      - name: Package
        run: (cd dist; cpack -G TGZ .)
      - name: Upload artifacts
        uses: 'actions/upload-artifact@v2'
        with:
          name: ardpre-linux
          path: dist/*.tar.gz
  build-macos:
    name: arduino-prelude - macOS
    runs-on: macos-latest
    env:
      CC: clang-12
      CXX: clang++-12
    steps:
      - name: Get toolchain
        run: |
          brew install llvm@12 ninja zlib
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: ~/llvm_static
          key: macos-llvm12.0
      - name: Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          export CC="$(brew --prefix llvm)/bin/clang -stdlib=libc++ -nostdinc++ -I$(brew --prefix)/opt/llvm/include/c++/v1"
          export CXX="$(brew --prefix llvm)/bin/clang++ -stdlib=libc++ -nostdinc++ -I$(brew --prefix)/opt/llvm/include/c++/v1"
          export LDFLAGS="-L$(brew --prefix)/opt/llvm/lib -Wl,-rpath,$(brew --prefix)/opt/llvm/lib"
          git clone --depth 1 https://github.com/deech/libclang-static-build
          cd libclang-static-build
          cmake -DCMAKE_INSTALL_PREFIX=~/llvm_static -S . -B build
          cmake --build ./build --target install
          cd ..
      - uses: actions/checkout@v2
      - name: Configure
        run: |
          export CC="$(brew --prefix llvm)/bin/clang -stdlib=libc++ -nostdinc++ -I$(brew --prefix)/opt/llvm/include/c++/v1 -Wno-unused-command-line-argument"
          export CXX="$(brew --prefix llvm)/bin/clang++ -stdlib=libc++ -nostdinc++ -I$(brew --prefix)/opt/llvm/include/c++/v1 -Wno-unused-command-line-argument"
          export LDFLAGS="-L$(brew --prefix)/opt/llvm/lib -Wl,-rpath,$(brew --prefix)/opt/llvm/lib"
          cmake -G Ninja -DARDPRE_CXXRT_LINKING=STATIC -DSLIBCLANG_DIR=~/llvm_static -S . -B dist
      - name: Build
        run: cmake --build ./dist
      - name: Package
        run: (cd dist; cpack -G TGZ .)
      - name: Upload artifacts
        uses: 'actions/upload-artifact@v2'
        with:
          name: ardpre-macos
          path: dist/*.tar.gz
  build-windows:
    name: arduino-prelude - Windows
    runs-on: windows-latest
    steps:
      - uses: ilammy/msvc-dev-cmd@v1
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: C:\llvm_static
          key: windows-llvm12.0
      - name: Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          git clone --depth 1 https://github.com/deech/libclang-static-build
          cd libclang-static-build
          cmake -DCMAKE_INSTALL_PREFIX=C:\llvm_static -DLLVM_USE_CRT_RELEASE=MT -S . -B build
          cmake --build ./build --target install --config Release
          cd ..
      - uses: actions/checkout@v2
      - name: Configure
        run: cmake -DSLIBCLANG_DIR=C:\llvm_static -S . -B dist
      - name: Build
        run: cmake --build ./dist --config Release
      - name: Package
        run: |
          cd dist
          cpack -G ZIP .
      - name: Upload artifacts
        uses: 'actions/upload-artifact@v2'
        with:
          name: ardpre-windows
          path: dist/*.zip
